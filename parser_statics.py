from transition_diagram import NonTerminal

# name, first, follow, starting node id
EPSILON = 'epsilon'
NON_TERMINALS = [
    ('Program', ['$', 'int', 'void'], ['$'], 0),
    ('Declaration-list', [EPSILON, 'int', 'void'],
     ['$', '{', 'break', ';', 'if', 'repeat', 'return', 'ID', '(', 'NUM', '}'], 3),
    ('Declaration', ['int', 'void'],
     ['int', 'void', '$', '{', 'break', ';', 'if', 'repeat', 'return', 'ID', '(', 'NUM', '}'], 6),
    ('Declaration-initial', ['int', 'void'], ['(', '[', ';', ',', ')'], 9),
    ('Declaration-prime', ['(', '[', ';'],
     ['int', 'void', '$', '{', 'break', ';', 'if', 'repeat', 'return', 'ID', '(', 'NUM', '}'], 12),
    ('Var-declaration-prime', ['[', ';'],
     ['int', 'void', '$', '{', 'break', ';', 'if', 'repeat', 'return', 'ID', '(', 'NUM', '}'], 14),
    ('Fun-declaration-prime', ['(', ],
     ['int', 'void', '$', '{', 'break', ';', 'if', 'repeat', 'return', 'ID', '(', 'NUM', '}', ], 19),
    ('Type-specifier', ['int', 'void', ], ['ID', ], 24),
    ('Params', ['int', 'void', ], [')', ], 26),
    ('Param-list', [',', EPSILON, ], [')', ], 31),
    ('Param', ['int', 'void', ], [',', ')'], 35),
    ('Param-prime', ['[', EPSILON, ], [',', ')'], 38),
    ('Compound-stmt', ['{', ],
     ['int', 'void', '$', '{', 'break', ';', 'if', 'repeat', 'return', 'ID', '(', 'NUM', '}', 'endif', 'else',
      'until', ], 41),
    ('Statement-list', [EPSILON, '{', 'break', ';', 'if', 'repeat', 'return', 'ID', '(', 'NUM', ], ['}'], 46),
    ('Statement', ['{', 'break', ';', 'if', 'repeat', 'return', 'ID', '(', 'NUM', ],
     ['{', 'break', ';', 'if', 'repeat', 'return', 'ID', '(', 'NUM', '}', 'endif', 'else', 'until', ], 49),
    ('Expression-stmt', ['break', ';', 'ID', '(', 'NUM', ],
     ['{', 'break', ';', 'if', 'repeat', 'return', 'ID', '(', 'NUM', '}', 'endif', 'else', 'until', ], 51),
    ('Selection-stmt', ['if', ],
     ['{', 'break', ';', 'if', 'repeat', 'return', 'ID', '(', 'NUM', '}', 'endif', 'else', 'until', ], 55),
    ('Else-stmt', ['endif', 'else'],
     ['{', 'break', ';', 'if', 'repeat', 'return', 'ID', '(', 'NUM', '}', 'endif', 'else', 'until', ], 62),
    ('Iteration-stmt', ['repeat'],
     ['{', 'break', ';', 'if', 'repeat', 'return', 'ID', '(', 'NUM', '}', 'endif', 'else', 'until', ], 66),
    ('Return-stmt', ['return', ],
     ['{', 'break', ';', 'if', 'repeat', 'return', 'ID', '(', 'NUM', '}', 'endif', 'else', 'until', ], 73),
    ('Return-stmt-prime', [';', 'ID', '(', 'NUM', ],
     ['{', 'break', ';', 'if', 'repeat', 'return', 'ID', '(', 'NUM', '}', 'endif', 'else', 'until', ], 76),
    ('Expression', ['ID', '(', 'NUM', ], [';', ')', ']', ',', ], 79),
    ('B', ['=', '[', '(', '*', '+', '-', '<', '==', EPSILON, ], [';', ')', ']', ',', ], 82),
    ('H', ['=', '*', EPSILON, '+', '-', '<', '==', ], [';', ')', ']', ',', ], 88),
    ('Simple-expression-zegond', ['(', 'NUM', ], [';', ')', ']', ',', ], 93),
    ('Simple-expression-prime', ['(', '*', '+', '-', '<', '==', EPSILON, ], [';', ')', ']', ',', ], 96),
    ('C', [EPSILON, '<', '==', ], [';', ')', ']', ',', ], 99),
    ('Relop', ['<', '==', ], ['(', 'ID', 'NUM', ], 102),
    ('Additive-expression', ['(', 'ID', 'NUM', ], [';', ')', ']', ',', ], 104),
    ('Additive-expression-prime', ['(', '*', '+', '-', EPSILON, ], ['<', '==', ';', ')', ']', ',', ], 107),
    ('Additive-expression-zegond', ['(', 'NUM', ], ['<', '==', ';', ')', ']', ',', ], 110),
    ('D', [EPSILON, '+', '-', ], ['*', '<', '==', ';', ')', ']', ',', ], 113),
    ('Addop', ['+', '-', ], ['(', 'ID', 'NUM', ], 117),
    ('Term', ['(', 'ID', 'NUM', ], ['+', '-', ';', ')', '*', '<', '==', ']', ',', ], 119),
    ('Term-prime', ['(', '*', EPSILON, ], ['+', '-', '<', '==', ';', ')', ']', ',', ], 122),
    ('Term-zegond', ['(', 'NUM', ], ['+', '-', '<', '==', ';', ')', ']', ',', ], 125),
    ('G', ['*', EPSILON, ], ['<', '==', ';', ')', '+', '-', '*', ']', ',', ], 128),
    ('Factor', ['(', 'ID', 'NUM', ], ['*', '+', '-', ';', ')', '<', '==', ']', ',', ], 132),
    ('Var-call-prime', ['(', '[', EPSILON, ], ['*', '+', '-', ';', ')', '<', '==', ']', ',', ], 137),
    ('Var-prime', ['[', EPSILON, ], ['*', '+', '-', ';', ')', '<', '==', ']', ',', ], 141),
    ('Factor-prime', ['(', EPSILON, ], ['*', '+', '-', '<', '==', ';', ')', ']', ',', ], 145),
    ('Factor-zegond', ['(', 'NUM', ], ['*', '+', '-', '<', '==', ';', ')', ']', ',', ], 149),
    ('Args', [EPSILON, 'ID', '(', 'NUM', ], [')', ], 153),
    ('Arg-list', ['ID', '(', 'NUM', ], [')', ], 155),
    ('Arg-list-prime', [',', EPSILON, ], [')', ], 158),
]


def create_all_non_terminals():
    for name, first, follow, starting_node in NON_TERMINALS:
        NonTerminal(name=name, first=first, follow=follow, starting_node_id=starting_node)
